@startuml

'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
skinparam linetype orto

skinparam classAttributeIconSize 0

'left to right direction

class ApplicationSession
{
    + static getInstance()
    + getCurrentSession()
}

class UserSession
{
    + getUserEmail()
}

class Collaborator {
    - name: String
    - birthdayDate: LocalDate
    - admissionDate: LocalDate
    - address: String
    - phoneNumber: String
    - email: String
    - taxpayerNumber: int
    - BINumber: long
    - job: String
    + Collaborator(name: String, birthdayDate: LocalDate, admissionDate: LocalDate, address: String, phoneNumber: String, email: String, taxpayerNumber: int, BINumber: long, job: String)
    + equals(o: Object): boolean
    + clone(): Collaborator
    + getName(): String
    + getBirthdayDate(): LocalDate
    + getAdmissionDate(): LocalDate
    + getAddress(): String
    + getPhoneNumber(): String
    + getEmail(): String
    + getTaxpayerNumber(): int
    + getBINumber(): long
    + getJob(): String
    + addJob(job: Job): void
}

class Skill {
    - skillName: String

    + addSkill(skillName: String)
}

class SkillRepository{
    - List<Skill> skills

    + addSkill(skillName: String)
    + removeSkill(skillName: String)
    + updateSkill(skillNameOld: String, skillNameNew: String)
    + getSkill(skillName: String): Skill
}

class AssignSkillUI {
}

class Repositories{
    - SkillRepository skillRepository
    - CollaboratorRepository CollaboratorRepository

    + getSkillRepository(): SkillRepository
    + getCollaboratorRepository(): CollaboratorRepository
}

class AssignSkillController {
    + AssignSkillController(CollaboratorRepository: CollaboratorRepository, skillRepository: SkillRepository)
    + assignSkill(CollaboratorId: String, skill: Skill)
}

class CollaboratorRepository {
    - List<Collaborator> collaborators

    + addCollaborator(collaborator: Collaborator)
    + removeCollaborator(collaborator: Collaborator)
    + addSkillToCollaborator(collaboratorId: String, skill: Skill)
    + getCollaborator(collaboratorId: String): Collaborator
    + assignSkill(collaboratorId: String, skill: Skill)
}

Repositories -> Repositories : instance
ApplicationSession -> ApplicationSession : instance

AssignSkillUI .> AssignSkillController

AssignSkillController .> Repositories : repositories

Repositories -> "1" SkillRepository
Repositories -> "1" CollaboratorRepository

AssignSkillController ..> Skill : skill
AssignSkillController ..> SkillRepository : SkillRepository

ApplicationSession --> "1" UserSession : userSession

AssignSkillController ..> "1" Collaborator : collaborator
AssignSkillController ..> ApplicationSession
AssignSkillController ..> UserSession

Collaborator --> "*" Skill : has
CollaboratorRepository --> "*" Collaborator : collaborators
CollaboratorRepository --> "1" Collaborator : getCollaborator(collaboratorId: String)
CollaboratorRepository --> "*" Skill : addSkillToCollaborator(collaboratorId: String, skill: Skill)
CollaboratorRepository --> "*" Skill : assignSkill(collaboratorId: String, skill: Skill)

@enduml

@startuml

skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
skinparam linetype orto
skinparam classAttributeIconSize 0

class ToDoList {
    - taskDescription: String
    - urgency: String
    - expectedDuration: int
    - greenSpaceName: String
    - status: String
    - userEmail: String

    + ToDoList(taskDescription: String, urgency: String, expectedDuration: int, greenSpaceName: String, status: String, userEmail: String)
    + getTaskDescription(): String
    + getUrgency(): String
    + getExpectedDuration(): int
    + getGreenSpaceName(): String
    + getStatus(): String
    + getUserEmail(): String
    + setStatus(status: String): void
}

class ToDoListRepository {
    - toDoLists: List<ToDoList>

    + add(toDoList: ToDoList): Optional<ToDoList>
    + getAllToDoLists(): List<ToDoList>
    + updateToDoListEntry(updatedEntry: ToDoList): void
    + findByTaskDescription(taskDescription: String): Optional<ToDoList>
    + findByUserEmailAndGreenSpaceName(userEmail: String, greenSpaceName: String): List<ToDoList>
}

class GreenSpace {
    - name: String
    - managerEmail: String

    + GreenSpace(name: String, managerEmail: String)
    + getName(): String
    + getManagerEmail(): String
}

class GreenSpaceRepository {
    - greenSpaces: List<GreenSpace>

    + add(greenSpace: GreenSpace): Optional<GreenSpace>
    + getAllGreenSpaces(): List<GreenSpace>
    + findByManagerEmail(email: String): List<GreenSpace>
}

class Agenda {
    - taskDescription: String
    - greenSpaceName: String
    - expectedDate: LocalDate
    - status: String

    + Agenda(taskDescription: String, greenSpaceName: String, expectedDate: LocalDate, status: String)
    + getTaskDescription(): String
    + getGreenSpaceName(): String
    + getExpectedDate(): LocalDate
    + getStatus(): String
}
class OrganizationRepository {
    - organizations: List<Organization>

    + Optional<Organization> getOrganizationByEmployee(Employee employee)
    + Optional<Organization> getOrganizationByEmployeeEmail(String email)
    + Optional<Organization> add(Organization organization)
}
class Organization {
    - name: String
    - website: String
    - phone: String
    - email: String
    - vatNumber: String
    - List<Employee> employees
    - List<Task> tasks

    + Organization(vatNumber: String)
    + boolean employs(Employee employee)
    + Optional<Task> createTask(String reference, String description, String informalDescription, String technicalDescription, int duration, double cost, TaskCategory taskCategory, Employee employee)
    + boolean anyEmployeeHasEmail(String email)
    + boolean addEmployee(Employee employee)
    + Organization clone()
}
class AgendaRepository {
    - agendas: List<Agenda>

    + add(agenda: Agenda): Optional<Agenda>
    + getAllAgendas(): List<Agenda>
    + findByGreenSpace(greenSpace: GreenSpace): List<Agenda>
}

class AgendaController {
    - agendaRepository: AgendaRepository
    - toDoListRepository: ToDoListRepository
    - greenSpaceRepository: GreenSpaceRepository

    + AgendaController()
    + createAgendaEntry(taskDescription: String, greenSpaceName: String, expectedDate: LocalDate, status: String, teamProposal: TeamProposal): Optional<Agenda>
    + getGreenSpaces(userEmail: String): List<GreenSpace>
    + getToDoListEntries(userEmail: String, greenSpaceName: String): List<ToDoList>
}

class AgendaUI {
    - userEmail: String
    - agendaController: AgendaController
    - teamProposal: TeamProposal

    + AgendaUI(userEmail: String)
    + run(): void
    + requestSelection(scanner: Scanner, size: int, type: String): int
}

class ApplicationSession {
    + static getInstance(): ApplicationSession
    + getCurrentSession(): UserSession
}

class UserSession {
    + getUserEmail(): String
}

class Repositories {
    + static getInstance(): Repositories
    + getToDoListRepository(): ToDoListRepository
    + getGreenSpaceRepository(): GreenSpaceRepository
    + getAgendaRepository(): AgendaRepository
}

ApplicationSession --> UserSession : userSession
AgendaController ..> ApplicationSession : uses
AgendaController ..> UserSession : uses
AgendaController ..> Repositories : instance
AgendaUI .> AgendaController : uses
AgendaController --> Agenda
Repositories --> OrganizationRepository
OrganizationRepository --> Organization
Organization --> ToDoList : gets available to-do list entry
Organization --> Agenda : Creates agenda entry
ToDoListRepository --> ToDoList
GreenSpaceRepository --> GreenSpace
AgendaRepository --> Agenda
Repositories --> ToDoListRepository
Repositories --> GreenSpaceRepository
Repositories --> AgendaRepository

@enduml
